Цели работы 
1. Изучение методики измерения времени работы подпрограммы. 2. Изучение приемов повышения точности измерения времени работы подпрограммы. 3. Изучение способов измерения времени работы подпрограммы. 4. Измерение времени работы подпрограммы в прикладной программе.
Назовите цели измерения времени.
 * В чем состоит методика измерения времени работы программы? 
* Назовите способы измерения времени работы программы. Перечислите их особенности
 * Каким способом лучше измерять большие промежутки времени (порядка нескольких часов)? 
* Каким способом лучше измерять малые промежутки времени (порядка времени работы нескольких команд процессора)?

1) Измерение времени выполнения прикладной программы или ее частей является одним из основных способов контроля характеристик аппаратного и программного обеспечения с точки зрения быстродействия. Такой контроль, с одной стороны, полезен для определения «узких мест» в алгоритме или программе, которые нуждаются в оптимизации.
Независимо от используемого таймера, измерение времени работы программы всегда выполняется с некоторой погрешностью (абсолютной или относительной). Погрешность измерения используемого таймера не должна выходить за рамки допустимой точности измерения. Величина допустимого значения погрешности определяет тип таймера, которым следует пользоваться при определении времени работы программы.
Относительная погрешность – это отношение абсолютной погрешности к величине временного интервала. Например, абсолютная погрешность в 1 мс даст относительную погрешность в 50%, если весь интервал был 2 мс и 0,1%, если интервал был 1 с. Таким образом, относительная погрешность показывает величину погрешности относительно всего интервала времени.
Процедура:
1. Пусть задана величина допустимого значения погрешности и её тип (относительная и/или абсолютная точность). Если требуется удовлетворить только абсолютной точности измерения, то п.2. данной процедуры пропускается. 
2. Относительная точность преобразуется в абсолютную. Для этого необходимо любым способом оценить время выполнения программы. Далее выполняется п.3. 
3. На компьютере, где будет выполняться измерение времени, оценивается степень загрузки процессора другими процессами. Если степень загрузки процессора высока, то выбирается таймер времени процесса, в противном случае выбирается произвольный таймер, например, из списка таймеров в п. «Способы получения показаний некоторых таймеров». Выбранный таймер должен обеспечивать требуемую точность измерения времени, иначе см. п.4. 
4. Если доступные таймеры не могут обеспечить необходимую точность измерения из-за малой величины измеряемого интервала времени, увеличение точности измерения можно достигнуть следующим образом. Программа многократно запускается в цикле, и измеряется общее время выполнения этого цикла. Полученное значение времени выполнения цикла делится на число итераций в цикле. Абсолютная погрешность измерения уменьшится пропорционально числу итераций цикла. 
5. Измеряется время выполнения программы с использованием приемов из пункта «Приемы уменьшения влияния посторонних факторов на время выполнения прикладной программы», затем проверяется качество измерения в п.6. 
6. Если по условию измерения времени программы требовалось обеспечить абсолютную точность, то полученное время является результатом измерения, в противном случае полученное измерение времени считается новым оценочным временем выполнения программы, для которого ещё раз вычисляется требуемая абсолютная точность из заданной относительной. Если новая абсолютная точность выше, чем точность выбранного таймера, то выполняется возврат к п.3 с новым оценочным временем выполнения программы.


1.Таймер системного времени (system time, wall-clock time)
Функции для получения системного времени: o Windows: GetSystemTime(), GetTickCount(), time(), o Linux: gettimeofday(), times(), time(), clock_gettime(). Кроме того, в Windows используется функция clock(), которая позволяет получить величину системного времени, прошедшего с момента запуска данного процесса
2. Таймер времени процесса (process time, CPU time) – программный счетчик, который отражает использование процессорного времени только конкретным процессом. Шаг изменения этого счетчика относительно велик, поэтому его не следует использовать для измерения малых промежутков времени. Функции для получения времени процесса: o Windows: GetThreadTimes(),GetProcessTimes(),
3. Счетчик тактов процессора (CPU time stamp counter) – аппаратный счетчик, значение которого увеличивается на каждом такте процессора. Такт процессора – самый малый интервал времени в вычислительной системе, который теоретически может быть замерен. Поэтому счетчик тактов позволяет с большой точностью измерять малые промежутки времени (вплоть до нескольких команд процессора). Счетчик тактов процессора имеет смысл использовать только для измерения интервалов времени меньших кванта времени, выделяемого процессу операционной системой. Для получения значения счетчика тактов используются специальные команды процессора, свои для каждой архитектуры: o x86/x86-64: rdtsc, o Alpha: rpcc, o Itanium: ar.itc, o PowerPC: mftb, mftbu.

СПОСОБЫ ПОЛУЧЕНИЯ ПОКАЗАНИЙ НЕКОТОРЫХ ТАЙМЕРОВ 
4.1 Утилита time
Утилита time выдаёт следующие временные характеристики работы программы: real – общее время работы программы согласно системному таймеру, user – время, которое работал пользовательский процесс (кроме времени работы других процессов) и sys – время, затраченное на выполнение системных вызовов программы. Дополнительная информация: time (1) man page. Точность: определяется точностью системного таймера и точностью измерения времени работы процесса (см. описание соответствующих таймеров ниже). Достоинство: готовая утилита, не требуется вносить изменения в программу. Недостаток: измеряется только время работы всей программы, нет возможности измерить время работы отдельных её частей.
Библиотечная функция clock_gettime

Библиотечная функция clock_gettime получает значения системного таймера в ОС Linux/UNIX (листинг 2).
Точность: зависит от точности системного таймера. Обычно в ОС Windows: 55 мс (55?10?3 с), в ОС GNU Linux/UNIX: 1 нс (1?10?9 с). Достоинство: переносимость – вне зависимости от аппаратного обеспечения функция доступна пользователю, т.к. реализуется ОС. Недостатки: относительно низкая точность (обычно ниже, чем у счётчика тактов, но выше, чем у функции times), и измеренный интервал включает время работы других процессов, которые работали на процессоре в измеряемый период.
4.3 Библиотечная функция times
Точность: зависит от кванта планировщика процессов, обычно 10 мс (10?2 с). Достоинство: Из измеряемого времени исключается время, которое работали другие процессы, это обеспечивает более точное измерение времени работы программы на сильно загруженных процессорах по сравнению с другими способами. Недостаток: относительно низкая точность, определяемая квантом времени переключения процессов.
4.4 Машинная команда rdtsc Машинная команда rdtsc
Точность: один такт (величина в секундах зависит от тактовой частоты процессора). Достоинство: максимально возможная точность измерения времени. Недостатки: привязка к архитектуре x86, в других архитектурах могут существовать аналогичные машинные команды. Затруднительно преобразование в секунды в процессорах с динамическим изменением частоты.
Суть алгоритма Вычисления Пи методом монте-Карла
1) Берем квадрат со стороной 2R
2)В него вписывается круг с радиусом R
3)Наугад ставим точки внутри квадрата
Геометрически вероятность P1 того, что точка попадёт в круг, равна отношению площадей круга и квадрата.
